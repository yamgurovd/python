Перейти к основному содержимому
рисунок
Типы данных
В прошлом юните мы познакомились с понятием переменная, научились их создавать и записывать в них данные. В то же время мы практически не касались того, какие данные можно записывать в переменные и какие они вообще бывают.

img
Источник: wikimedia.org
Каждая единица данных в Python является объектом какого-то типа. Мы уже встречались со строками, с числами, но их, естественно, намного больше. Типы данных бывают встроенными (built-in), могут быть загружены из библиотек или созданы самостоятельно. Основные типы, которыми пользуется практически любой программист, являются встроенными.

Давайте посмотрим на них в таблице:

Данные	Типы	Примеры
Целые числа	int	73, 0
Числа с плавающей точкой	float	3.14, -2.79
Строки	str	"Hello, world!"
Логические переменные	bool	True, False
Списки	list	[1,2,3,4]
Кортежи	tuple	(‘a’,’b’,’c’)
Словари	dict	{‘a’ : 1, ‘b’ : 2}
Множества	set	{‘a’, 1, ‘b’, 2}
Можно заметить, что некоторые типы очень похожи друг на друга. Например, мы знаем, что целые числа и числа с плавающей точкой всё равно остаются числами (как минимум) с точки зрения математики. И каждое число можно записать как строку, используя специфичный для строк синтаксис (кавычки). А также списки, кортежи и множества вообще записываются практически одинаково, визуально отличаясь только скобками. По своему предназначению они также похожи — в них можно записать несколько объектов.

Несмотря на то, что работа с ними всё же заметно разная, есть возможность список представить в виде множества, а, например, кортеж в виде списка. Возможных комбинаций «перевода» одних типов в другие много, а сам этот процесс называется преобразованием или приведением типов.

Как программа определяет тип данных?

Python — язык с неявной сильной динамической типизацией. Разберём это определение по частям.

Динамическая типизация означает, что тип переменной определяется во время выполнения программы, а не во время компиляции. Поэтому справедливо говорить, что переменная — это контейнер. Во время выполнения программы в него можно положить данные одного типа, после чего заменить данными другого типа.

Сильная типизация нам говорит о том, что мы не можем совершать операции над объектами разного типа без приведения их к одному типу. Например, Python вызовет ошибку, если мы попытаемся сложить число и строку.

И наконец, неявная типизация нам говорит о том, что тип переменной при её объявлении не нужно указывать. Такой подход при грамотном использовании открывает большое количество возможностей, о которых мы постепенно узнаем.

Возможности языка Python позволяют узнавать тип переменной, используя встроенную функцию type():

a = 3.14
b = '3.14'

print(type(a))
# <class 'float'>
print(type(b))
# <class 'str'>
Задание 2.3.1
1/1 point (graded)
Выберите верные утверждения.
Может быть несколько верных вариантов ответа

A. Каждый объект в Python имеет тип
B. Тип переменной определяется при её создании и в дальнейшем его изменить нельзя
C. Тип данных объекта можно изменить в некоторых случаях
D. В Python фиксированное количество типов и создать добавить собственные невозможно
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 2.3.2
1/1 point (graded)
Функция type предназначена для...
получения размера переменной в байтах
получения всех типов в Python
получения типа переменной
создания нового типа данных
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Все типы можно разделить на две группы: изменяемые и неизменяемые типы данных.

Неизменяемые типы	Изменяемые типы
Целые числа (int)	Списки (list)
Числа с плавающей точкой (float)	Словари (dict)
Строки (str)	Множества (set)
Логические переменные (bool)
Кортежи (tuple)
Особенность неизменяемых типов заключается в том, что такие объекты не могут быть изменены «на лету». Иными словами, если вы захотите произвести операцию, например, со строкой, то будет создана новая строка с теми изменениями, которые вы собираетесь внести. Однако это не касается списков, словарей и множеств, в которые вы можете добавлять новые элементы, удалять старые или обновлять существующие — сам объект останется прежним.

Начнём наше знакомство с неизменяемых типов данных. Каждый из них имеет свой синтаксис, способ создания и операции, поэтому будем рассматривать их по отдельности.

Задание 2.3.3
1/1 point (graded)
Строки являются...
изменяемым типом данных, потому что модификации строки сохраняются в существующем объекте
изменяемым типом данных, потому что при модификации строки порождается новый объект
неизменяемым типом данных, потому что модификации строки сохраняются в существующем объекте
неизменяемым типом данных, потому что при модификации строки порождается новый объект
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Целые числа
Объекты типа int предназначены для хранения целочисленных данных. Создание такой переменной не требует особой записи — необходимо только присвоить целое число этой переменной. Приведём несколько примеров.

a = 1
b = 73
c = -12
d = 2
С помощью функции type() можем удостовериться, что мы создали переменные, в которых хранится целочисленный объект:

print(type(a))
# <class 'int'>
print(type(b))
# <class 'int'>
print(type(c))
# <class 'int'>
print(type(d))
# <class 'int'>
С такими объектами можно производить известные операции: сложение, вычитание, умножение и возведение в степень. В результате получаются также целые числа (кроме операции деления, на которой мы остановимся чуть позже):

e = a+b
print(e)
print(type(e))
# 74
# <class 'int'>

f = b*c
print(f)
print(type(f))
# -876
# <class 'int'>

g = b**d # оператор возведения в степень в Python обозначается как **
print(g)
print(type(g))
# 5329
# <class 'int'>
Подробнее об особенностях деления целых чисел мы узнаем в следующем юните, а сейчас посмотрим, как создавать объекты чисел с плавающей точкой.

Числа с плавающей точкой
Под числами с плавающей точкой подразумеваются дробные числа, а сам термин «плавающая точка» или «плавающая запятая» происходит от особенностей хранения таких чисел в памяти компьютера.

img   Дополнительно
Рассмотрение таких особенностей выходит за рамки этого модуля, но при желании с ними можно ознакомиться по ссылке.

Создание переменных с дробными числами практически ничем не отличается от создания целых чисел. Разве что нужно помнить, что в качестве десятичного разделителя выступает точка, а не запятая:

x = 0.1
y = 21.5

print(type(x))
# <class 'float'>
print(type(y))
# <class 'float'>
С числами с плавающей точкой можно производить уже все знакомые операции, в том числе и деление:

z = y / x
print(z)
print(type(z))
# 215.0
# <class 'float'>
Предлагаем вам немного поразмышлять. Попробуйте догадаться, что выведет код в заданиях 2.3.4 и 2.3.5, а затем запустите его в IDE и посмотрите на результат. Он может вас удивить. Почему так получается, и вычисления происходят не совсем привычным для нас образом, мы разберем в следующем юните.
Обратите внимание! Задание 2.3.4 и 2.3.5 — тренировочные, за них не начисляются баллы прогресса.

Задание 2.3.4
0 points possible (ungraded)
Что распечатает функция print()? Попробуйте решить это задание без применения IDE, затем можете запустить программу и проверить результат.

print (0.1+0.1*5-0.3*4)
-0.6
  верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 2.3.5
1/1 point (graded)
Что распечатает функция print()? Попробуйте решить это задание без применения IDE, затем можете запустить программу и проверить результат.

print ((3.14+0.3)/2+0.15)
1.8699999999999999
  верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Обмен значениями
Наличие арифметических операций для численных типов данных (как float, так и int) позволяет совершить обмен данными между переменными без создания временной переменной и не используя множественное присваивание, с которым мы знакомились в прошлом юните.

Задание 2.3.6
Подумайте самостоятельно, как совершить обмен значениями численных переменных, используя только действия сложения и вычитания.

Посмотреть ответ для самопроверки
Временное значение, которое мы раньше сохраняли в другую переменную, теперь хранится в одной из них.

Задание 2.3.7
0/1 point (graded)
Чему будет равно значение переменной a после выполнения первых двух строчек приведённого выше кода, если изначально значения переменных следующие:

a = -13
b = 7
9
  неверно
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Строки
Для представления текстовой информации в Python используются объекты типа str — строки. Запись текстовых данных осуществляется с помощью апострофов и кавычек:

some_text = "python"
other_text = 'Java'
Никакой разницы между ними нет. Казалось бы, зачем тогда две формы записи одного и того же типа данных? Ответ становится очевиден, если необходимо использовать апостроф или кавычки внутри самого текста:

introducing = "I'm Ivan"
action = 'Я читаю "Изучаем python" Марка Лутца'
Использование одиночного апострофа внутри кавычек так же, как и кавычек внутри апострофов, не приведёт к появлению ошибки в отличие от неправильной записи:

introducing = 'I'm Ivan'
# SyntaxError: invalid character in identifier
Язык предоставляет нам возможность записывать большие текстовые блоки, используя тройные кавычки (как одинарные, так и двойные). Преимущество тройных кавычек также заключается в том, что в такой записи можно не беспокоиться об использовании апострофов или кавычек внутри строки.

long_text = '''Здесь может
               находиться
               большой "кусок" кода'''
other_long_text = """Таким образом тоже
                     можно записать"""
Некоторые авторы книг и статей в Интернете рекомендуют использовать такую запись строковых литералов в качестве многострочных комментариев, в силу отсутствия иной возможности создания таковых в Python. Вопрос достаточно спорный, но в PEP8 (предложения по улучшению языка) прямо рекомендуется не использовать такой способ и оставить кавычки только для строк.
Задание 2.3.8
1/1 point (graded)
В каком случае компилятор выдаст ошибку?
"I'll read this book"
'I find the answer in 'stackoverflow''
"""Teacher said: 'read "Learning Python" by Mark Lutz'"""
'''I'm looking for a solution'''
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Python позволяет получить доступ к отдельным символам или даже подстрокам, обращаясь к ним по индексам — порядковому номеру символа в строке:

s = "python"
print(s[0])
# p
print(s[1:4])
# yth
Несмотря на то, что мы можем прочитать отдельный символ, перезаписать мы его не можем, потому что строки являются неизменяемыми данными:

s = "python"
s[0] = 'C'
print(s)
# ожидается вывод "Cython", однако Python вернёт ошибку:
# TypeError: 'str' object does not support item assignment
Логические переменные
рисунок
В жизни мы часто сталкиваемся с ситуациями, когда нужно сказать «да» или «нет». Ты сегодня хорошо выспался? Да. Москва сразу строилась? Нет. Если смотреть на эти вопросы под другим углом, мы утверждаем, что некоторые высказывания являются истинными, а другие ложными. В данном контексте под высказываниями и подразумеваются предложения, которые могут быть либо истинными, либо ложными. Мы можем определённо сказать, что высказывание «число 3 больше, чем 10» является ложным, а например «число 3 является целым» — истинным.

Такого рода ответы (истина или ложь) можно было бы хранить в виде строки. Например, «да» и «нет» или «истина» и «ложь», но для англоговорящих людей это «yes» и «no», а также «true» и «false». И вариантов оказывается слишком много для простых «да» и «нет». С другой стороны, можно использовать числа — 0 и 1. Тогда высказывание «число 3 больше 10» является нулём. Не очень интуитивно, согласитесь?

Чтобы иметь определённость в создании таких объектов, по смыслу соответствующих «истина» и «ложь», в Python существует тип логических переменных — bool. Их ещё называют булевыми переменными. Они создаются с помощью ключевых слов True и False как некоторая договорённость между разработчиками для именования таких значений:

t = True
f = False
Логические значения можно получать и как возвращаемое значение некоторых действий, таких как сравнение:

print(3 > 10)
# False

print(3 < 10)
# True

print(3 == 10) # равны ли объекты?
# False
Можно также проверить, содержится ли какой-то символ в строке:

print('r' in 'world') # проверяем отдельный символ
# True

print('th' in 'python') # проверяем целую подстроку
# True

print('the' in 'python')
# False
Задание 2.3.9
2/2 points (graded)
Истинно (True) или ложно (False) высказывание?

1.
1.57*3/1.5==3.14
True
False
верно
2.
'PY'in"Python"
True
False
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
По своему смыслу логические значения остаются эквивалентны нулю (False) и единице (True). И это является причиной того, что их также относят к численным. Отличие заключается в том, что значений всего два, но более существенно то, что для них определены собственные, логические, операции. Подробнее с ними вы познакомитесь в следующем модуле.

Кортеж
Рассмотренные выше численные и логический типы данных являются примитивными — они не имеют внутренней структуры. Строковые данные, в свою очередь, имеют внутреннюю структуру — отдельные символы и подстроки, но они также являются строками, пусть и меньшей длины.

Для сохранения нескольких объектов (необязательно текстовых) в одну переменную можно использовать кортежи (tuple). Чтобы создать кортеж, нужно записать данные в круглые скобки через запятую:

date = (1, 'january', 2020)
После чего можно получить доступ к отдельным переменным по индексу:

print(date[0])
# 1
print(date[1])
# january
print(date[2])
# 2020
В связи с тем, что кортеж так же, как и другие приведённые выше типы, является неизменяемым, попытка его модифицировать приведёт к ошибке:

date[0] = date[0] + 1
# TypeError: 'tuple' object does not support item assignment
Кортежи в Python используются повсеместно. Особенно их использование эффективно, когда нужно сохранить несколько связанных по смыслу между собой объектов, и вы точно уверены, что они сами и их количество не должны изменяться в ходе программы. И, более того, если вы намеренно хотите запретить изменение этих данных при выполнении.

Снова про неизменяемость
Когда мы кратко познакомились с основными неизменяемыми типами данных, ещё раз посмотрим, как проявляется это свойство на примере строк.

Пусть у нас будет две строки:

s1 = "foo"
s2 = "bar"
Допишем вторую строку к первой:

s1 = s1+s2
print(s1)
# foobar
Может показаться, что мы к существующей переменной s1 «приклеили» справа вторую переменную — модифицировали её. Это так и не так одновременно. Давайте посмотрим на эти строки немного глубже. Для этого воспользуемся встроенной функцией id(), которая возвращает уникальный идентификатор любого объекта.

s1 = "foo"
print(id(s1), s1) #проверяем идентификатор
# 139953609727144, foo

s2 = "bar"
print(id(s2), s2) #проверяем идентификатор
# 139953609727088, bar

s1 = s1+s2
print(id(s1), s1) #проверяем идентификатор
# 139953459591296, foobar
Как мы видим, идентификатор переменной s1 после модификации изменился. Это означает, что старая строка foo была стёрта, а вместо неё записана новая, независимая от неё, строка. По «случайному» совпадению начало новой строки совпадает со старой, но с точки зрения программы переменная s1  перезаписалась полностью.

Задание 2.3.10
1/1 point (graded)
Какую ошибку покажет Python при выполнении кода?


t = (0,1,2)
t[1]  +=  1
ValueError
TypeError
SyntaxError
NameError
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.