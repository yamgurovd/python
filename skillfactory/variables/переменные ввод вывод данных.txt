Переменные
В этом юните мы начинаем знакомство с основополагающей темой изучения любого языка программирования — переменные.


Строго говоря, переменная — это именованная область памяти компьютера, адрес которой позволяет получить доступ к данным.
Чтобы понять, что заложено в этом определении, обратимся к тому, как устроена память компьютера.

В самом простом понимании, память —  это упорядоченная последовательность ячеек (байтов), в которых располагаются данные. Каждая ячейка имеет свой порядковый номер — адрес.

img
Источник: rsdn.org
Адреса, они же порядковые номера, сложны для запоминания. Они не являются интуитивно понятными. Во времена зарождения компьютеров программисту необходимо было помнить, в какой участок памяти он сохранил данные. Представьте, каким тяжелым был процесс разработки программ, если для всех данных нужно, помимо прочего, помнить, в какой ячейке памяти они находятся!

Вряд ли вы, предлагая другу сходить в Эрмитаж, скажете ему: «Пойдём завтра на Дворцовую набережную, дом 2!». Нет, скорее всего вы скажете именно: «Пойдём завтра в Эрмитаж!». И друг вас точно поймёт, потому что здание по адресу Дворцовая набережная, дом 2 имеет своё понятное название. Более того, ни вам, ни вашему другу не нужно всегда помнить точный адрес Эрмитажа. По такому же принципу появились и переменные — для облегчения доступа к данным в памяти.

В низкоуровневом программировании (на уровне программирования устройств) до сих пор можно встретить работу с ячейками памяти напрямую по их адресам, но в языках высокого уровня, к которым и относится Python, доступ к памяти и данным, которые в них хранятся, происходит через переменные.


Оператор присваивания
После того как мы посмотрели, как хранятся данные в памяти, можем разобраться с тем, как это происходит на уровне программы.
Как мы обсуждали ранее, переменная — это именованная ячейка памяти. Можно представить себе её как контейнер, в который кладутся данные. В него можно что-то положить, можно посмотреть, что в нём лежит. Иногда даже можно выполнить действия с тем, что лежит внутри такого «контейнера».

img
Источник: compscihelp.com
Начнём с того, что научимся записывать данные в переменную. Это действие можно выполнить с помощью команды:

some_string = "value"
Рассмотрим подробнее эту синтаксическую конструкцию. Слева от знака равенства находится название переменной some_string. Справа от знака равенства — данные, которые мы хотим положить в наш контейнер. А сам знак равенства, который называется оператором присваивания, является сигналом для программы, что данные нужно записать в эту переменную.

Строго говоря, название переменной может быть абсолютно любым:

vnfjivndfjn = "other_value"
В данном случае, это тоже переменная. Однако согласитесь, что переменные с осмысленным названием выглядят более читабельно.

Существует два главных правила именования переменных:

Название переменной должно состоять только из букв, цифр и знаков подчёркивания _.
Название переменной не должно начинаться с цифры.
Помимо двух обязательных правил, существует множество не таких строгих, но рекомендуемых. Эти и не только эти правила объединены в разные версии PEP (Python Enhanced Proposal) — документов, описывающих предложения по улучшению языка.

Пожалуй, главный принцип, которого стоит придерживаться при именовании переменных и в целом при написании кода: «код читается чаще, чем пишется».

img   Дополнительно
По ссылке можно подробнее ознакомиться с PEP8.

Особое внимание стоит обратить внимание на раздел «Соглашения по именованию».

Одной из любимых «достопримечательностей» языка Python является возможность так называемого множественного присваивания. В одной строке можно присвоить значение сразу нескольким переменным:

a, b = "some_string_a", "some_string_b"
Оператор присваивания работает аналогично присваиванию одной переменной. Слева от знака равенства нужно записать переменные через запятую, а справа от равенства — значения этих переменных в соответствующем порядке.

Благодаря такой возможности становится удобным обмен значений двух переменных. Такая подзадача может часто возникать, например, при сортировке нескольких объектов. «Классический» подход заключается в создании ещё одной переменной как временного хранилища:

temp = a # сохранили в temp старое значение a
a = b # в переменную a сохранили значение b
b = temp # а в переменную b вернули сохранённое значение a
Множественное присваивание позволяет записать это действие в одной строке:

a, b = b, a
Задание 2.2.1
1/1 point (graded)
Переменная — это...
именованная ячейка памяти компьютера.
ссылка на один из используемых участков памяти.
порядковый номер ячейки памяти компьютера.
упорядоченная последовательность ячеек памяти компьютера.
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 2.2.2
1/1 point (graded)
Выберите корректное название переменной.
europe/russia
saint-petersburg
english_enbankment
120building
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 2.2.3
1/1 point (graded)
Выберите некорректное название переменной.
_by
b_y
b2
2b
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 2.2.4
1/1 point (graded)
Выберите правильную запись оператора присваивания.

var = "some_data"

var << "some_data"

var <- "some_data"

var := "some_data"
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 2.2.5
9/9 points (graded)
Распределите правила именования переменных на рекомендуемые и обязательные.

1. Не следует использовать в качестве названия переменной l (латинская «эль»).

Рекомендуемое
 верно
2. Не следует использовать в качестве названия переменной O (заглавная буква «o»).

Рекомендуемое
 верно
3. Название должно состоять только из букв и цифр (допустимо нижнее подчёркивание).

Обязательное
 верно
4. Первый символ не должен быть цифрой.

Обязательное
 верно
5. Не следует использовать в качестве названия переменной I (латинская буква «ай»).

Рекомендуемое
 верно
6. В названии не могут присутствовать другие знаки, кроме подчёркивания _

Обязательное
 верно
7. Название переменной следует записывать в стиле snake_case.

Рекомендуемое
 верно
8. Не следует использовать транслитерацию русских слов, а только английские.

Рекомендуемое
 верно
9. Не следует использовать в качестве названия переменных зарезервированные слова языка – int, bool, type и др.

Обязательное
 верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Работа с консолью
Программы призваны выполнять определённые алгоритмы. Однако, если они не имеют возможности обмениваться данными с «внешней средой», результат их работы будет всегда один и тот же.

Как правило, программа взаимодействует с этой внешней средой, будь то пользователь, другая программа или даже другое устройство, посредством обмена информацией. Обмен информацией чаще всего двусторонний: какие-то данные (входные) программа получает с консоли, из файла, Интернета или других источников, а другие данные программа может возвращать сама.

Шаг за шагом мы рассмотрим, как происходит ввод и вывод данных на примере взаимодействия программы и пользователя посредством консоли.

Консоль — это программа, обеспечивающая текстовый интерфейс взаимодействия с пользователями.
рисунок
При создании программ нам часто приходится сталкиваться с ситуацией, когда один и тот же алгоритм необходимо использовать много раз. Во избежание дублирования кода, особенно длинного и сложного, в языках программирования существуют конструкции, которые называют функциями.

Более формально, функция — фрагмент кода, к которому можно обратиться из любого другого места.

Код, облачённый в функцию, выполняет алгоритм, который, как правило, является целостным и преследует конкретную цель. Цель алгоритма может быть двух видов: просто выполнить определённый набор команд или подготовить (вернуть) некоторый результат (данные).

В программировании такой результат, который возвращает функция, называют возвращаемым значением функции. В этом случае можно провести аналогию с математическими функциями. Чтобы решить уравнение 3x=9, мы должны выполнить известные шаги: взять правую часть уравнения, взять коэффициент перед неизвестным и разделить их друг на друга. Решение уравнения, или в наших терминах, результат алгоритма — корень уравнения.

# Демонстрация функции. НЕ является кодом python
решить_уравнение(3x=9)
# результат работы — 3
Выражение в круглых скобках, следующих за названием функции, называется аргументом функции. Аргументы — это данные, которые необходимы функции для работы. Невозможно решить уравнение, если этого уравнения нет. Мы указываем его в виде аргумента, чтобы алгоритм знал, какое конкретно уравнение мы хотим решить.

Если говорить про функции в целом, то у них могут быть аргументы, а могут и отсутствовать, они могут возвращать значения, а могут не возвращать. Они могут реализовать самые простые действия (как в нашем примере), а могут заменять собой длинные наборы команд. Со многими из них мы будем постепенно знакомиться и, в конечном итоге, вы сами научитесь их создавать. Сейчас же мы обратим внимание на две функции, которые помогут нам работать с консолью.

Ввод с консоли, input()
Начнём наше обсуждение с ввода данных с клавиатуры в консоль. Данное действие осуществляется с помощью функции input(). Принцип её работы заключается в следующем. Если во время выполнения встречается эта функция, то программа переходит в режим ожидания, позволяя пользователю ввести данные. После нажатия клавиши Enter, введённый текст передается в программу в виде значения, которое возвращает функцию input(). Иначе говоря, возвращаемое значение алгоритма,  скрывающегося за именем input — это текст, который пользователь вводит с помощью клавиатуры.

text = input()
# пользователю предлагается ввести данные
# после нажатия Enter они сохранятся в переменную text
Функция input() также предоставляет возможность выводить подсказки к тому, что программа хочет от него увидеть. Для этого в качестве аргумента функции (в круглых скобках после слова input) необходимо ввести текст-подсказку, не забывая поставить кавычки вокруг этого текста.

name = input("Ввведите ваше имя:")
# Введите ваше имя:
# После ввода текста с клавиатуры и нажатия Enter,
# имя сохранится в переменную name
Стоит обратить внимание, что функция input() всегда возвращает данные в виде текста, даже если введено число. После знакомства с типами данных мы научимся распознавать ещё и числа!

Так как функция input() возвращает в программу некоторое значение, также важно его куда-то «запомнить», чтобы была возможность его использовать далее. Для этого результат работы функции мы присваиваем некоторой переменной.

Вывод в консоль, print()
Используя функцию input(), мы передаём нашей программе различные данные, но этого часто недостаточно. Программа в ходе своей работы должна формировать результат, который может увидеть разработчик и пользователь программы.

Для выполнения этой команды используется другая функция — print(). Она предназначена показывать в консоли всё, что находится в круглых скобках после слова print(аргумент функции). Вы уже знакомы с ней из предыдущего модуля, но посмотрим ещё раз, как это работает на примере:

print("Hello, world!")
# Hello, world!
После выполнения этой команды текст, записанный в круглых скобках, отобразится в консоли. Чтобы показать данные в консоли, функция print() должна знать, что ей нужно вывести именно их. Для этого требуемые данные мы будем писать в качестве аргумента функции. С другой стороны, в отличие от функции input(), здесь нет необходимости возвращать какие-то данные обратно в программу, поэтому print() не имеет возвращаемого значения. Это означает, что нет необходимости присваивать её какой-то переменной.

Функция print() может выводить не только текст, но и данные других типов. Например, числа:

print(3.14159)
# 3.14159
Более того, можно выводить в консоль сразу и текст, и числа. Для этого вводимые данные разделяются запятыми. По умолчанию функция print() автоматически ставит пробел между аргументами:

print("Ответ на главный вопрос жизни, вселенной и всего такого -", 42)
# Ответ на главный вопрос жизни, вселенной и всего такого - 42
Задание 2.2.6
1/1 point (graded)
Для чего предназначен аргумент функции input()?
Для указания имени переменной, данные которой выводятся на экран консоли
В скобках указывается тип данных, которые нужно ввести с клавиатуры
Для указания имени переменной, в которую сохраняются данные с консоли
Текст-подсказка пользователю перед вводом данных с клавиатуры
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Инструкция по работе с заданиями на Codeboard
На курсе вам будут встречаться задания, которые вы будете выполнять в окне внешнего компилятора. Чтобы работа с ним была для вас лёгкой, просмотрите скринкаст ниже.

Задание 2.2.7
1/1 point (graded)
month = input ("Какой сейчас месяц?")

??? ("Текущий месяц -", month)
Вставьте пропущенный код вместо знаков ???, чтобы код компилировался.
print
  верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.Верно (1/1 балл)Review
Запустите код с помощью кнопки Run.
Задание 2.2.8 (External resource)

Практический пример
Давайте посмотрим, как можно использовать одновременно ввод и вывод данных с клавиатуры, чтобы создать форму ввода информации о пользователе.

Скопируйте себе этот код и запустите его! (для этого запустите код с помощью кнопки Run)
first_name = input("Введите ваше имя:")
last_name = input("Введите вашу фамилию:")
age = input("Введите ваш возраст:")
city = input("Введите город проживания:")
Обратите внимание, что в скобках при вызове input можно (хоть и необязательно) передавать аргумент. Но этот аргумент не то, что вы хотите передать в программу, а подсказка для пользователя в виде строки. Данные при этом следует вводить с клавиатуры.

Функцию input можно вызывать и без аргументов (с пустыми скобками). Но в этом случае программа будет просто ждать ввода с клавиатуры без какой-либо подсказки для пользователя.

Неверно (в надежде поместить то, что в скобках, в переменную a):

a = input(123)
Верно:

a = input('Введите данные: ')
После ввода данных от пользователя данные помещаются в переменную a в виде строки (даже если вы ввели число). Если вы хотите передать в программу строку, этого достаточно.

Но если вы хотите передать программе именно число, с которым можно выполнять математические действия, его следует преобразовать в численную переменную с помощью функций int (целое число) или float (число с плавающей запятой).

a = input('Введите число: ')#11
#a = '11' (строка)
b = a + 2 # ошибка: попытка сложить строку '11' с числом 2
a = int(input('Введите число: '))#11
#a = 11 (число)
b = a + 2 # результат -- b = 13
a = float(input('Введите число: '))#11
#a = 11.0 (число с плавающей точкой)
b = a + 2 # результат -- b = 13.0
Задание 2.2.9
1/1 point (graded)
Что произойдёт после запуска кода? Выберите верное утверждение:
программа последовательно, 4 раза, предложит ввести данные, сохранит их в переменные и завершится
программа выведет 4 строки с соответствующим текстом и завершится
программа предложит ввести сразу 4 строки данных, сохранит их в переменные и завершится
программа будет 4 раза выводить строки с текстом из input() после каждого нажатия Enter, после чего завершится
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Представим, что после получения информации о пользователе, мы хотим его поприветствовать.

Скопируйте следующий код и запустите его!
first_name = input("Введите ваше имя:")
last_name = input("Введите вашу фамилию:")
age = input("Введите ваш возраст:")
city = input("Введите город проживания:")

# Выводим пустую строку
print("")

# Выводим приветствие, подставляя имя и фамилию пользователя,
# которые он ввёл с клавиатуры
print("Привет,", first_name, last_name, "!")

# Выводим пустую строку
print("")

# Выводим фиксированный текст для удобства просмотра
print("Ваш профиль:")

# Выводим возраст и город, которые указал пользователь
print("Возраст:", age)
print("Город:", city)
Задание 2.2.10
1/1 point (graded)
Какая информация будет выведена в консоль? Выберите верные утверждения.
A. Ошибка TypeError, потому что с помощью функции print() пытаемся вывести число
B. Пустые строки и дополнительная информация
C. После ввода всех данных и нажатия Enter программа завершится без вывода
D. Данные, введённые с клавиатуры
верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 2.2.11
Сравните результаты работы своей программы с выводом, представленным ниже.
Введите ваше имя: Иван
Введите вашу фамилию: Петров
Введите ваш возраст: 25
Введите город проживания: Москва

Привет, Иван Петров!

Ваш профиль:
Возраст: 25
Город: Москва
Задание 2.2.11
Как необходимо модифицировать функцию print(), которая отображает возраст, чтобы вывод выглядел так: