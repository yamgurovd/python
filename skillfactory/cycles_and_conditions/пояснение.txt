Перейти к основному содержимому
img

В прошлом модуле вы изучили такие переменные, как булевы (тип данных bool). Их особенность в том, что они могут принимать всего два значения:

True, которое можно сравнить с 1;
False, которое сравнимо с 0.
Для работы с этими переменными есть целый раздел математики, который называется алгеброй логики. Он изучает операции над высказываниями. Мы с вами разберём только основные операции, которые позволят вам формализовывать и записывать придуманные алгоритмы вашей программы.

В данном юните мы разберём операторы сравнения и логические операторы, зачем они нужны и как ими пользоваться.

Операторы — это некий функционал, производящий какие-либо действия, который может быть представлен в виде символов, например, «+», или специальных зарезервированных слов.
Операторы могут производить некоторые действия над данными, и эти данные называются операндами. В общем смысле все операторы делятся на несколько типов.

Среди них можно выделить:

унарные,
бинарные,
тернарные.
Унарные и бинарные операторы — это такие операторы, которые для своей работы требуют одно и два значения соответственно. Например, оператор сложения является бинарным оператором. А тернарные — это такие, которые возвращают свой второй или третий операнд в зависимости от значения логического выражения, заданного первым операндом.

Операторы сравнения
Операторы сравнения позволяют сравнивать объекты (прям неожиданность :) ). Используя операторы сравнения, вы всегда в результате получаете булеву переменную. Числа сравнить легко, например, все мы прекрасно знаем, что 3 < 5, и это правда. А вот, выражение 5 > 10 является ложным, так как 5 не больше 10. Те переменные или выражения, которые сравниваются, как раз и называются операндами.

Все операции сравнения бинарные, так как между собой мы сравниваем два значения.

Вот список операторов сравнения доступных в Python:

Оператор	Значение
<	Меньше. Условие верно, если первый операнд меньше второго.
>	Больше. Условие верно, если первый операнд больше второго.
<=	Меньше или равно. Условие верно, если первый операнд меньше либо равен второму.
>=	Больше или равно. Условие верно, если первый операнд больше либо равен второму.
==	Равенство. Условие верно, если два операнда равны.
!=	Неравенство. Условие верно, если два операнда неравны.
Логические операторы
Среди логических операторов выделяют так называемые побитовые логические операторы. Мы подробно на них останавливаться не будем, но для ознакомления приведём.

Оператор	Значение
~x	Побитовое «НЕ»
|	Побитовое «ИЛИ»
^	Побитовое «ИСКЛЮЧИТЕЛЬНОЕ ИЛИ»
&	Побитовое «И»
Что значит побитовое? То есть эти операции работают с данными, которые представлены в виде набора битов, тех самых 1 и 0. С этими 1 и 0 работает ваш компьютер, другого он понять не может. То есть логические операции «НЕ», «ИЛИ» и «И» применяются над каждым отдельным битом. Более детально с этим материалом можно ознакомиться здесь.

Вернёмся к основным логическим операторам.

Их три:

логическое «НЕ» (отрицание),
логическое «И»,
логическое «ИЛИ».
Из них могут составляться более сложные логические операторы. Также есть два отдельных оператора: для проверки принадлежности и тождественности.

Оператор	Смысл	Комментарий
not	Логическое «НЕ»	Возвращает противоположное значение.
or	Логическое «ИЛИ»	Возвращает True, если хотя бы одна из переменных True.
and	Логическое «И»	Возвращает True, если обе переменные True.
in, not in	Проверка принадлежности	Возвращает True, если проверяемая переменная содержится/не содержится в последовательности (списке, кортеже, строке...).
is, is not	Проверка тождественности	Возвращает True, если проверяемые объекты эквивалентны/не эквиваленты. То есть переменные ссылаются на один и тот же адрес в памяти компьютера.
Логическое «НЕ»
Операция логического «НЕ» по смыслу является отрицанием. Естественно предположить, что если высказывание не истинно, то оно ложно, и наоборот. Именно так действует этот оператор.

Логические операторы удобно записывать в виде таблиц истинности. То есть таблиц, где перечислены все возможные комбинации значений и результатов, которые может принимать данная операция. Логическое «НЕ» называют унарным оператором, то есть он требует рядом с собой только одно значение. Поэтому его таблица истинности выглядит следующим образом:

x	not x
True	False
False	True
print(not True)
# False

print(not False)
# True
Логическое «И»
Логическое «И» является бинарным оператором, поэтому его таблица истинности выглядит так:

x	y	x and y
False (0)	False (0)	False (0)
False (0)	True (1)	False (0)
True (1)	False (0)	False (0)
True (1)	True (1)	True (1)
Результат применения оператора and будет истинным, если и первое, и второе являются истинными. Во всех остальных случаях результат — False (ложь). Логическое «И» ещё называют логическим умножением. В результате умножения на выходе получается 1, если перемножить 1 и 1. В остальных случаях любой 0 зануляет всё выражение.

# можно проверить, находится ли число 1 в промежутке (0,4)
cond1 = 0 < 1
cond2 = 1 < 4

print(cond1 and cond2)
# True

# или, например, содержат ли две строки один и тот же символ
cond3 = 't' in "python"
cond4 = 't' in "django"

print(cond3 and cond4)
# False
Логическое «ИЛИ»
Логическое «ИЛИ» действует немного иначе, чем мы привыкли в повседневной речи. Когда мы говорим: «Сегодня ночью я высплюсь или пройду ещё парочку юнитов», как правило, имеем в виду, что выполнится либо одно условие, либо другое, но никак не оба вместе. Это принцип исключающего «ИЛИ», к которому мы привыкли в жизни, а в Python одно другого не исключает.

x	y	x or y
False (0)	False (0)	False (0)
False (0)	True (1)	True (1)
True (1)	False (0)	True (1)
True (1)	True (1)	True (1)
Как видим, результат из последней строки — True. Так получается несмотря на то, что при переводе на русский язык мы говорим «или x, или y». Дело в том, что наиболее точный «перевод» означает хотя бы одно — если хотя бы один является истинным, то и результат тоже будет истинным.

Логическое «ИЛИ» называют ещё логическим сложением. В результате можем получить 0, если оба значения 0.

# к слову, логические выражения можно сразу объединять в одно целое
print(('t' in "python") or ('t' in "django"))
# True
При объединении нескольких логических выражений в одно целое нужно быть осторожным с приоритетом логических действий аналогично сложению и умножению обычных чисел. Ведь сначала выполняется умножение, а потом сложение, если приоритет действий не изменяется скобками. Использование очень больших логических выражений является плохим тоном в программировании, но если всё же возникает такая необходимость, можно ознакомиться с порядком приоритетов здесь.

Задание 3.2.1
2/2 points (graded)
Вместо знаков «???» вставьте нужный оператор:

print(True???False)
# True
or
  верно
print(True???False)
# False
and
  верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 3.2.2
1/1 point (graded)
В речи иногда можно услышать оправдание: «Не-не-не, это не правда». С помощью логических операторов в Python это высказывание можно записать так:

      not
      not
      not
      not
      True
Чему будет равно значение такого логического выражения?

True
  верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 3.2.3
2/2 points (graded)
Чему равно значение выражения?

notTrueor (True and not True)
False
  верно
      not
      False
      and
      True
      or
      False
      and
      not
      True

True
  верно
Show answer
Отправить
Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Задание 3.2.4 (External resource)

Возможное решение

Рассмотрим парочку примеров. Если ваша задача проверить, можно ли делить, и является ли делитель нулем, то проверку в явном виде zero != 0 делать излишне.

# Плохо
if zero != 0:
   print(10 / zero)
else:
   print("Делить на ноль нельзя")

# Хорошо
if zero:
   print(10 / zero)
else:
   print("Делить на ноль нельзя")
Если вам нужно проверить, пустая строка или нет, то сравнивать её таким способом password == "", а уж тем более таким len(password) == 0 ни к чему.

# Плохо
if password == "":
   print("Вы забыли ввести пароль")
else:
   ...

# Очень плохо
if len(password) == 0:
   print("Вы забыли ввести пароль")
else:
   ...

# Хорошо
if not password:
   print("Вы забыли ввести пароль")
else:
   ...