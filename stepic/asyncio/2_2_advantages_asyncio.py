"""
Первая встреча
Пока мы еще не углубились в темный лес неведомых терминов и незнакомых концепций, я хочу показать вам небольшой фокус!
Сначала покажу пример, где все будет так, как вы привыкли – выполнение программы шаг за шагом.
"""
# Пример 1
import time

start = time.time()  # Время начала эксперимента!)


def sleeping(n):
    # {time.time() - start:.4f} - время от начала работы программы до текущего момента.
    # :.4f - ограничение количества знаков после запятой (4).
    print(f"Начало выполнения длительной операции № {n}: {time.time() - start:.4f}")
    time.sleep(1)  # Имитация операции длительностью в 1 секунду.
    print(f"Длительная операция № {n} завершена")


def main():
    # Запускаю 30 операций.
    all_results = [sleeping(i) for i in range(1, 31)]
    print(f"Выполнено {len(all_results)} операций.")
    print(f"Программа завершена за {time.time() - start:.4f}")


# Запуск главной функции.
main()

"""
Вывод:
Начало выполнения длительной операции № 1: 0.0000
Длительная операция № 1 завершена
Начало выполнения длительной операции № 2: 1.0005
Длительная операция № 2 завершена

...часть принтов пропущу для экономии места...

Начало выполнения длительной операции № 29: 28.0174
Длительная операция № 29 завершена
Начало выполнения длительной операции № 30: 29.0178
Длительная операция № 30 завершена
Программа завершена за 30.018867015838623
"""

"""
В этом примере с помощью функции main() в цикле запускается тридцать раз функция  sleeping(). 
Функция sleeping() печатает сообщение с номером операции, выполняет задержку на 1 секунду, печатает сообщение о завершении операции. 
Выполнение main() завершается печатью времени, затраченного на выполнение всех операций. Видим, 
что на выполнение программы было затрачено чуть больше 30 секунд, ничего необычного.

А теперь магия! 
Беру тот же код и добавляю к нему несколько ключевых слов из модуля asyncio: async/await
"""

# Пример 2:
import time
import asyncio

start = time.time()  # Время начала эксперимента!)


async def sleeping(n):
    # {time.time() - start:.4f} - время от начала работы программы до текущего момента.
    # :.4f - ограничение количества знаков после запятой (4).
    print(f"Начало выполнения длительной операции № {n}: {time.time() - start:.4f}")
    await asyncio.sleep(1)  # Имитация длительной операции в 1 секунду длиной.
    print(f"Длительная операция № {n} завершена")


async def main():
    # Запускаю 30 операций.
    task = [sleeping(i) for i in range(1, 31)]
    all_results = await asyncio.gather(*task)
    print(f"Выполнено {len(all_results)} операций.")
    print(f"Программа завершена за {time.time() - start:.4f}")


# Запуск главной корутины.
asyncio.run(main())

"""
Посмотрим на код, текста явно прибавилось:

Объявление функций изменилось: async def вместо привычного def.
sleep() тоже какой-то необычный: await asyncio.sleep(1).
Чтобы получить результат, теперь нужно совершить еще какое-то действие: await asyncio.gather(*task).
Запуск выглядит несколько сложнее: asyncio.run(main())
Пришло время узнать: а стоило ли оно того? 
Запускаем программу, и что же получаем на выходе?
"""

"""
Вы тоже заметили? Порядок вывода сообщений не совпал с номерами операций!
(На разных машинах он будет разным, и даже существует вероятность того, что у кого-то этот порядок совпадет.)
Все ли операции выполнены? Да, все 30!

Выполнено 30 операций.
А теперь самое интересное!

Программа завершена за 1.0059
Как же так? Ведь мы выполнили те же 30 длительных операций, но за время, 
которое в предыдущем примере было затрачено на выполнение только одной единственной операции?

Чтобы помочь разобраться со всеми "почему?", "как?" и многими другими вопросами, и был создан курс "Асинхронный Python"!
Изучайте материалы, выполняйте задания, думайте, задавайте вопросы — и результат не заставит себя ждать!
Легкой дороги не обещаем, но будет интересно! Главное — не сдаваться и идти вперед!

*Синтаксис и правила написания асинхронного кода вы узнаете чуть позже, но если нет сил ждать, то вот парочка кратких очевидных советов: 

Для прохождения курса создайте себе отдельную виртуальную среду через venv и работайте в ней.
Все примеры в данном курсе необходимо запускать в .py файле у себя на ПК, а для блокнотов IPython (Jupyter) необходимо немного изменить код:  
с asyncio.run(main()) на await main().
Библиотека asyncio не нуждается в специальной установке, поскольку уже является частью стандартной библиотеки интерпретатора, начиная с Python 3.4 и выше.
Этого должно быть достаточно, чтобы выполнить код из примера
"""