"""
IO bound и CPU bound
Для дальнейшей работы с модулем asyncio очень важно понимать, для каких задач его стоит применять, а для каких нет.
Один из критериев, по которым вы будете принимать решение о необходимости асинхронного программирования - это вид задачи.
В контексте асинхронного программирования мы будем разделять 2 вида задач: IO bound и CPU bound задачи.
"""

"""
IO bound
В выражении IO bound: I/O значит Input/Output (Ввод/Вывод), а bound переводится как связанный. 
То есть IO bound задачи -это задачи, совокупное время выполнения которых в основном определяется временем выполнения 
всех операций ввода/вывода. Например, когда программа читает или записывает файлы, отправляет или получает данные 
через интернет, общается с пользователем и так далее. Если вы замечаете, что ваша программа больше времени ожидает ответ, 
чем работает, значит, она ограничена именно операциями ввода-вывода.
"""

"""
Аналогия из жизни:
Представьте, что вы в библиотеке и вам нужно прочитать определенную книгу. Как можно охарактеризовать операции, 
которые вам придется для этого сделать?

Поиск книги библиотекарем — это как задача, которая зависит от ввода-вывода (IO bound). Здесь дело в том, что 
Вам нужно подождать, пока библиотекарь найдёт книгу. Это время ожидания, потому что Вы зависите от действий другого 
человека. Например, библиотекарь идёт к каталогу, проверяет наличие книги, идёт к полке, ищет её среди других книг и, 
наконец, приносит её Вам, в это время вы можете заниматься своими делами. Весь этот процесс — это внешняя операция, 
которая требует времени на выполнение и не зависит напрямую от Вас.
 
Чтение книги — это задача, требующая вычислительных мощностей (CPU bound). Когда Вы начинаете читать, Ваш мозг активно 
работает с информацией: анализирует текст, визуализирует события, запоминает детали и так далее. 
Этот процесс полностью зависит от Вас и Вашей способности обрабатывать информацию. В данном случае книга уже у 
Вас в руках, и, как быстро Вы её прочитаете, зависит только от Вашего "внутреннего процессора", то есть мозга.
"""

""" Примеры IO операций:"""

"""1. Чтение и запись файлов: Это самые общие примеры IO операций. Когда вы открываете файл для чтения или записи, 
вы выполняете IO операцию.
"""
# Чтение файла
with open('file.txt', 'r') as f:
    data = f.read()

# Запись в файл
with open('file.txt', 'w') as f:
    f.write('Hello, World!')

"""2. Сетевые операции, взаимодействие с API: Это включает в себя отправку и получение данных по сети. Это может быть 
общение с веб-сервером, обмен данными между клиентом и сервером или даже чтение и запись данных в базу данных."""

import requests

# Отправка GET запроса
response = requests.get('http://www.python.org')

# Отправка POST запроса
response = requests.post('http://www.python.org', data={'key': 'value'})

"""3. Взаимодействие с пользователем: Это может включать в себя чтение ввода с клавиатуры или вывод информации на экран."""
# Чтение ввода с клавиатуры
name = input('Введите ваше имя: ')

# Вывод информации на экран
print(f'Привет, {name}!')

"""4. Взаимодействие с операционной системой: Это может включать в себя чтение или запись данных в системные файлы или 
регистры, взаимодействие с процессами или потоками и так далее."""
import os

# Получение списка файлов в директории
files = os.listdir('/path/to/directory')

# Запуск системной команды
os.system('ls -l')

"""Взаимодействие с базами данных: Это может включать в себя чтение и запись данных в базу данных, выполнение SQL-запросов, 
транзакций и так далее."""
import sqlite3

# Подключение к базе данных
conn = sqlite3.connect('example.db')

# Создание курсора
c = conn.cursor()

# Выполнение SQL-запроса
c.execute("SELECT * FROM stocks WHERE symbol = 'RHAT'")

"""Взаимодействие с внешними устройствами: Это может включать в себя чтение или запись данных на внешние устройства, 
такие как принтеры, сканеры, камеры и так далее."""
import serial

# Открытие последовательного порта
ser = serial.Serial('/dev/ttyUSB0')

# Чтение данных из порта
data = ser.read(100)

"""CPU bound
Когда говорят, что задача или программа "CPU bound", это значит, что скорость выполнения зависит преимущественно от 
мощности процессора. Если Ваша программа большую часть времени тратит на вычисления или обработку данных, то она именно такая."""

"""Аналогия из жизни:
Представьте, что Вы сталкиваетесь с трудной математической задачей. Время, которое Вы потратите на её решение, 
будет похоже на ситуацию с CPU bound. Почему? Потому что Вы будете интенсивно задействовать свои мозговые ресурсы — 
умственные способности, чтобы найти решение. Этот процесс требует активного мышления, ведь именно от Вашей способности 
быстро и эффективно обрабатывать информацию зависит, как быстро Вы справитесь с задачей."""

# Примеры CPU операций:
"""1. Арифметические и логические операции: Это включает в себя операции сложения, вычитания, умножения, деления, 
возведения в степень, а также операции сравнения и логические операции (и, или, не)."""
# Арифметические операции
result = (3 + 4) * 5 / 2

# Логические операции
is_true = (5 > 3) and (2 < 4)

"""Циклы: Циклы, такие как for и while, требуют активного использования процессора для итерации по элементам или 
выполнения повторяющихся действий."""
# Цикл for
for i in range(10):
    print(i)

# Цикл while
i = 0
while i < 10:
    print(i)
    i += 1

"""Арифметические и логические операции: Это включает в себя операции сложения, вычитания, умножения, деления, 
возведения в степень, а также операции сравнения и логические операции (и, или, не)."""
# Арифметические операции
result = (3 + 4) * 5 / 2

# Логические операции
is_true = (5 > 3) and (2 < 4)

"""Условные операторы: Условные операторы, такие как if, elif и else, задействуют процессор для проверки условий и 
выполнения соответствующих действий."""
# Условные операторы
x = 10
if x > 5:
    print('x больше 5')
elif x < 5:
    print('x меньше 5')
else:
    print('x равно 5')

"""Функции: Вызов функций и методов, а также возвращение значений, требует активного использования процессора."""


# Определение функции
def square(x):
    return x ** 2


# Вызов функции
result = square(5)

"""Обработка данных: Это может включать в себя сортировку данных, поиск данных, преобразование данных и так далее."""
# Сортировка списка
numbers = [5, 2, 3, 1, 4]
numbers.sort()

# Поиск в списке
index = numbers.index(3)
